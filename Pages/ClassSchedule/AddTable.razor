@page "/CreateTable/{Id:int}"
@using TeachingSchedule.Models;
@using BlazorBootstrap;
@using TeachingSchedule.Services;
@inject RoomService _RoomService
@inject ClassService _ClassService
@inject SubjectService _SubjectService
@inject TeacherService _TeacherService
<PageTitle>เพิ่มข้อมูล/สร้างตาราง</PageTitle>
<div class="container m-0 p-3">
    <div class="row">
        <div class="col-xl-4 col-lg-4">
            <Card>
                <CardBody>
                    <h3>วิชาเรียน</h3>
                    @if (subject_select != null)
                    {
                        <h5>ชื่อวิชา: @subject_select.NameSubject (@subject_select.PassSubject)</h5>
                        <p>จำนวนคาบเรียน: @subject_select.AmountSubject คาบ</p>
                        <Button Class="w-100" Color="ButtonColor.Danger" @onclick="() => DeleteSubject(subject_select.IdSubject)">ลบวิชาเรียน</Button>
                        <div class="d-grid gap-2 col-6 mx-auto mt-2">
                            <Button Color="ButtonColor.Link" @onclick='() => ClearSelection("Subject")'>ล้างการเลือก</Button>
                        </div>
                    }
                    else
                    {
                        <div class="dropdown w-100">
                            <button class="btn btn-light dropdown-toggle border border-black w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                ดูรายวิชาเรียนในสายชั้น
                            </button>
                            <ul class="dropdown-menu w-100">
                                @foreach (var DataSubject in datasubject_db)
                                {
                                    <li><a class="dropdown-item" @onclick="() => SelectSubject(DataSubject.IdSubject)">@DataSubject.NameSubject</a></li>
                                }
                            </ul>
                        </div>
                        <Button Type="ButtonType.Button" Class="w-100 mt-2" Color="ButtonColor.Primary" @onclick='() => OnShowModalClick("Subject")'><Icon Name="IconName.PlusLg"></Icon> เพิ่มวิชาเรียน</Button>
                    }
                </CardBody>
            </Card>
        </div>
        <div class="col-xl-4 col-lg-4">
            <Card>
                <CardBody>
                    <h3>คุณครู</h3>
                    @if (teacher_select != null)
                    {
                        <h5>ชื่อผู้สอน: @teacher_select.NameTeacher</h5>
                        <p>วิชาเอก: @(datasubject_db.Find(subject => subject.IdSubject == teacher_select.IdSubject)?.NameSubject ?? "ไม่ได้ระบุ")</p>
                        <Button Class="w-100" Color="ButtonColor.Danger" @onclick="() => DeleteTeacher(teacher_select.IdTeacher)">ลบวิชาเรียน</Button>
                        <div class="d-grid gap-2 col-6 mx-auto mt-2">
                            <Button Color="ButtonColor.Link" @onclick='() => ClearSelection("Teacher")'>ล้างการเลือก</Button>
                        </div>
                    }
                    else
                    {
                        <div class="dropdown w-100">
                            <button class="btn btn-light dropdown-toggle border border-black w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                ดูรายชื่ออาจารย์ผู้สอน
                            </button>
                            <ul class="dropdown-menu w-100">
                                @foreach (var DataTeacher in datateacher_db)
                                {
                                    <li><a class="dropdown-item" @onclick="() => SelectTeacher(DataTeacher.IdTeacher)">@DataTeacher.NameTeacher</a></li>
                                }
                            </ul>
                        </div>
                        <Button Class="w-100 mt-2" Color="ButtonColor.Primary" @onclick='() => OnShowModalClick("Teacher")'><Icon Name="IconName.PlusLg"></Icon> เพิ่มรายชื่อคุณครู</Button>
                    }

                </CardBody>
            </Card>
        </div>
        <div class="col-xl-4 col-lg-4">
            <Card>
                <CardBody>
                    <h3>สถานที่เรียน</h3>
                    @if (room_select != null)
                    {
                        <h5 class="fs-5 mb-2">ชื่อห้องเรียน: @room_select.NameRoom</h5>
                        <br />
                        <Button Class="w-100" Color="ButtonColor.Danger" @onclick="() => DeleteRoom(room_select.IdRoom) ">ลบห้องเรียน</Button>
                        <div class="d-grid gap-2 col-6 mx-auto mt-2">
                            <Button Color="ButtonColor.Link" @onclick='() => ClearSelection("Room")'>ล้างการเลือก</Button>
                        </div>
                    }else{
                        <div class="dropdown w-100">
                            <button class="btn btn-light dropdown-toggle border border-black w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                ดูรายชื่อห้องเรียน
                            </button>
                            <ul class="dropdown-menu w-100">
                                @foreach (var DataRoom in dataroom_db)
                                {
                                    <li><a class="dropdown-item" @onclick="() => SelectRoom(DataRoom.IdRoom)">@DataRoom.NameRoom</a></li>
                                }
                            </ul>
                        </div>
                        <Button Class="w-100 mt-2" Color="ButtonColor.Primary" @onclick='() => OnShowModalClick("Room")'><Icon Name="IconName.PlusLg"></Icon> เพิ่มห้องเรียน</Button>
                   }
                </CardBody>
            </Card>
        </div>
    </div>
    <div class="row mt-3">
        <Button Class="w-100 mt-3" Color="ButtonColor.Success" @onclick="() => GenerateTable()">สร้างตารางสอน</Button>
    </div>
</div>
<hr />
<TableViewComponent />


<Modal UseStaticBackdrop="true" Class="modal fade" @ref="modal" data-bs-focus="false" title="ฟอร์มเพิ่มข้อมูล" style="display:none;" IsScrollable="true">
    <BodyTemplate>
        @switch (FormType)
        {
            case "Subject":
                <EditForm Model="@subject" OnValidSubmit="OnAddSubject">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">ชื่อรายวิชา</label>
                        <InputText class="form-control" @bind-Value="@subject.NameSubject" Placeholder="กรอกชื่อรายวิชาเช่น ภาษาอังกฤษ ฟิสิกส์ เคมี" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">รหัสวิชา</label>
                        <InputText class="form-control" @bind-Value="@subject.PassSubject" Placeholder="กรอกรหัสวิชา" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">จำนวนคาบเรียน</label>
                        <NumberInput class="form-control" @bind-Value="@Amout" Placeholder="กรอกเลขคาบเรียน เช่น 2 คาบ,3 คาบ" Min="1" Max="20" TValue="int" />
                    </div>
                    <Button Class="w-100" Type="ButtonType.Submit" Color="ButtonColor.Primary">สร้างรายวิชา</Button>
                </EditForm>
                break;
            case "Teacher":
                <EditForm Model="@teacher" OnValidSubmit="OnAddTeacher">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">ชื่ออาจารย์</label>
                        <InputText class="form-control" @bind-Value="@teacher.NameTeacher" Placeholder="กรอกชื่ออาจารย์" />
                    </div>
                    <div class="dropdown w-100">
                        <h5 class="text-center">วิชาเอกที่เลือก: @datasubject_db.FirstOrDefault(x => x.IdSubject == teacher.IdSubject)?.NameSubject</h5>
                        <label class="form-label">เลือกวิชาเอกเฉพาะ (ไม่จำเป็นต้องกรอก)</label>

                        <button class="btn btn-light dropdown-toggle border border-black w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            เลือกวิชาเอกสำหรับการสอน
                        </button>
                        <ul class="dropdown-menu w-100">
                            @foreach (var DataSubject in datasubject_db)
                            {
                                <li><a class="dropdown-item" @onclick="() =>SetIdSubject(DataSubject.IdSubject)">@DataSubject.NameSubject</a></li>
                            }
                        </ul>
                    </div>
                    <Button Class="w-100 mt-3" Type="ButtonType.Submit" Color="ButtonColor.Primary">เพิ่มอาจารย์ผู้สอน</Button>
                </EditForm>
                break;
            case "Room":
                <EditForm Model="@room" OnValidSubmit="OnAddRoom">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">ชื่อห้อง</label>
                        <InputText class="form-control" @bind-Value="@room.NameRoom" Placeholder="กรอกชื่อห้องเช่น ห้องวิทยาศาสตร์ ห้องเรียน701" />
                    </div>
                    <Button Class="w-100 mt-3" Type="ButtonType.Submit" Color="ButtonColor.Primary">สร้างห้องเรียน</Button>
                </EditForm>
                break;
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">ยกเลิก</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter]
    public int Id { get; set; }
    private int Amout { get; set; } = 1;
    private Modal modal;
    public bool AutoCrateTable { get; set; }
    //สำหรับข้อมูลที่ผู้ใช้เลือก
    private Room room_select { get; set; }
    private Subject subject_select { get; set; }
    private Teacher teacher_select { get; set; }
    //สำหรับ เก็บข้อมูลที่ได้จาก DB
    public List<Room> dataroom_db { get; set; } = new List<Room>();
    public List<Teacher> datateacher_db { get; set; } = new List<Teacher>();
    public List<Subject> datasubject_db { get; set; } = new List<Subject>();
    //สำหรับ Object Form Add
    private Subject subject = new Subject();
    private Teacher teacher = new Teacher();
    private Room room = new Room();
    public string FormType { get; set; }

    private async Task GenerateTable()
    {
        await _ClassService.GenerateTable(Id);
    }
    public async Task OnAddRoom()
    {
        room.IdClass = Id;
        await _RoomService.AddRoomToDb(room);
        await OnHideModalClick();
        room = new Room();//ล้างข้อมูลที่เพิ่ม
        await OnLoadData();
    }
    public async Task OnAddTeacher()
    {
        teacher.IdClass = Id;
        await _TeacherService.AddTeacher(teacher);
        await OnHideModalClick();
        teacher = new Teacher();//ล้างข้อมูลที่เพิ่ม
        await OnLoadData();
    }
    public async Task OnAddSubject()
    {
        subject.IdClass = Id;
        subject.AmountSubject = Amout;
        await _SubjectService.AddSubject(subject);
        await OnHideModalClick();
        subject = new Subject();
        await OnLoadData();
    }
    private void SetIdSubject(int idsubject)
    {
        teacher.IdSubject = idsubject;
    }
    protected override async Task OnInitializedAsync()
    {
        await OnLoadData();
    }
    private async Task OnLoadData()
    {
        datasubject_db = await _SubjectService.GetSubjectByIdClass(Id);
        datateacher_db = await _TeacherService.GetTeacherByIdClass(Id);
        dataroom_db = await _RoomService.GetRoomByIdClass(Id);
        StateHasChanged();
    }
    private async Task SelectSubject(int IdSubject)
    {
        subject_select = datasubject_db.Find(subject => subject.IdSubject == IdSubject);
    }
    private async Task SelectTeacher(int IdTeacher)
    {
        teacher_select = datateacher_db.Find(teacher => teacher.IdTeacher == IdTeacher);
    }
    private async Task SelectRoom(int IdRoom)
    {
        room_select = dataroom_db.Find(room => room.IdRoom == IdRoom);
    }
    private async Task OnShowModalClick(string ShownModalType)
    {
        switch (ShownModalType)
        {
            case "Subject": FormType = "Subject"; break;
            case "Teacher": FormType = "Teacher"; break;
            case "Room": FormType = "Room"; break;
        }
        await modal.ShowAsync();
    }
    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    private async Task ClearSelection(string nametype)
    {
        switch (nametype)
        {
            case "Subject": subject_select = null; break;
            case "Teacher": teacher_select = null; break;
            case "Room": room_select = null; break;
        }
    }
    private async Task DeleteSubject(int IdSubject)
    {
        await _SubjectService.DeleteSubject(IdSubject);
        await ClearSelection("Subject");
        await OnLoadData();
    }
    private async Task DeleteTeacher(int IdTeacher)
    {
        await _TeacherService.DeleteTeacher(IdTeacher);
        await ClearSelection("Teacher");
        await OnLoadData();
    }
    private async Task DeleteRoom(int IdRoom)
    {
        await _RoomService.DeleteRoom(IdRoom);
        await ClearSelection("Room");
        await OnLoadData();
    }
}
