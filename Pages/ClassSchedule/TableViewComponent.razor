@using System.Text.Json;
@using TeachingSchedule.Models;
@using TeachingSchedule.Services;
@inject IJSRuntime _Js;
@inject PeriodClassService _PeriodService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<div class="table-responsive">
    <table class="table table-bordered border-primary text-center p-5">
        <thead>
            <tr>
                <th scope="col">วัน/เวลา</th>
                @foreach (var Time in Period)
                {
                    if (Time.BreakTime == true)
                    {

                        <th rowspan="5">@Time.TimeStart/@Time.TimeEnd <br>พัก</th>
                    }
                    else
                    {
                        <th>@Time.TimeStart/@Time.TimeEnd</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">วันจันทร์</th>
                @foreach (var MondayData in tableClassRooms){
                <td colspan="@(MondayData.AmountSubject)">@(MondayData.IdSubject),
                @MondayData.IdTeacher;
                </td>
                }
            </tr>
            @{
            }
            <tr>
                <th scope="row">วันอังคาร</th>
@*                 @foreach (var TuData in validTuData)
                {
                    <td>@TuData.IdSubject</td>
                } *@
            </tr>
            <tr>
                <th scope="row">วันพุธ</th>
                <td >Larry the Bird</td>
            </tr>
            <tr>
                <th scope="row">วันพฤหัสบดี</th>
                <td>Larry the Bird</td>
            </tr>
            <tr>
                <th scope="row">วันศุกร์</th>
                <td colspan="2">Larry the Bird</td>
            </tr>
        </tbody>
    </table>
</div>
@code {
    public List<PeriodClass> Period { get; set; } = new List<PeriodClass>();
    public List<TableClassRoom> tableClassRooms { get; set; } = new List<TableClassRoom>();
    private bool dataLoaded = false;
    [CascadingParameter(Name = "IdClass")]
    public int IdClass { get; set; } = 1;
    [CascadingParameter(Name = "IdClassRoom")]
    public int IdClassRoom { get; set; }
    [Inject]
    protected ClassService _ClassService { get; set; }

    private List<TableClassRoom> teacherServices { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     tableClassRooms = await _ClassService.GetTableClassRoomByIdClass(IdClass,IdClassRoom);
    //     var validTuData = tableClassRooms.Where(x => x.DayTableclass == "M").ToList();
    //     // var validTuData = tableClassRooms.Where(x => x.DayTableclass == "Tu").ToList();
    // }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (dataLoaded == false)
        {
            string periodJson = await localStorage.GetItemAsync<string>("DefaultPeriod");
            if (periodJson == null)
            {
                await _PeriodService.GetDefaultPeriod();
                periodJson = await localStorage.GetItemAsync<string>("DefaultPeriod");
            }
            Period = JsonSerializer.Deserialize<List<PeriodClass>>(periodJson);
            dataLoaded = true;
            StateHasChanged();
        }
    }
}